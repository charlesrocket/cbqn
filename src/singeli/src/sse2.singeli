# compact casting for the annoying intrinsic type system
def v2i{x:V=[_]T if w128{V}} = if(isint{T}) x else [16]u8 ~~ x
def v2f{x:T if w128{T}} = [4]f32 ~~ x
def v2d{x:T if w128{T}} = [2]f64 ~~ x


# load & store
def loadLow{ptr:*V, w if w128{V} and w== 16} = V ~~ emit{[16]u8, '_mm_loadu_si16', ptr}
def loadLow{ptr:*V, w if w128{V} and w== 32} = V ~~ emit{[16]u8, '_mm_loadu_si32', ptr}
def loadLow{ptr:*V, w if w128{V} and w== 64} = V ~~ emit{[16]u8, '_mm_loadu_si64', ptr}
def loadLow{ptr:*V, w if w128{V} and w==128} = load{ptr}

def storeLow{ptr:*E, w, x:T=[_]E if w128{T} and w== 16} = emit{void, '_mm_storeu_si16', ptr, v2i{x}}
def storeLow{ptr:*E, w, x:T=[_]E if w128{T} and w== 32} = emit{void, '_mm_storeu_si32', ptr, v2i{x}}
def storeLow{ptr:*E, w, x:T=[_]E if w128{T} and w== 64} = emit{void, '_mm_storeu_si64', ptr, v2i{x}}
def storeLow{ptr:*E, w, x:T=[_]E if w128{T} and w==128} = store{*T~~ptr, 0, x}



# float comparison
def unord{a:T,b:T==[4]f32} = [4]u32~~emit{[4]f32, '_mm_cmpunord_ps',  a, b}
def unord{a:T,b:T==[2]f64} = [2]u64~~emit{[2]f64, '_mm_cmpunord_pd',  a, b}



# integer arith
def mulh{a:T,b:T if [8]i16==T} = emit{T, '_mm_mulhi_epi16', a, b}
def mulh{a:T,b:T if [8]u16==T} = emit{T, '_mm_mulhi_epu16', a, b}
def mul32{a:T,b:T if [2]u64==T} = emit{T, '_mm_mul_epu32',   a, b} # reads only low 32 bits of arguments
def __mul{a:T,b:T if [4]i32==T} = {
  def mu{x, y} = [4]i32 ~~ mul32{[2]u64~~x, [2]u64~~y}
  def sw{n, ...vs} = each{{c} => vec_shuffle{i32, c, n}, vs}
  lo:= mu{a, b}
  hi:= mu{...sw{tup{1,0}, a, b}}
  [4]i32~~mzip{...sw{tup{0,2,1,3}, lo, hi}, 0}
}

# float arith
def rsqrtE{a:([4]f32)} = emit{[4]f32, '_mm_rsqrt_ps', a}
def   rcpE{a:([4]f32)} = emit{[4]f32, '_mm_rcp_ps', a}

# mask stuff
def andAllZero{x:T, y:T if w128i{T}} = homAll{(x & y) == T**0}

def topMask{x:T if w128{T, 8}} = emit{u16, '_mm_movemask_epi8', x}
def topMask{x:T if w128{T, 16}} = topMask{packs{[8]i16~~x, [8]i16**0}}
def topMask{x:T if w128{T, 32}} = emit{u8, '_mm_movemask_ps', v2f{x}}
def topMask{x:T if w128{T, 64}} = emit{u8, '_mm_movemask_pd', v2d{x}}
def homMask{x:T if w128{T}} = topMask{x}
def homMaskX{a:[_]T if width{T}==16} = tup{2, homMask{re_el{u8,a}}}
def homMask{a:T, b:T if w128i{T,16}} = homMask{packs{ty_s{a},ty_s{b}}}

def homAny{x:T if w128i{T}} = homMask{[16]u8 ~~ x} != 0
def homAll{x:T if w128i{T}} = homMask{[16]u8 ~~ x} == 0xffff

def topAny{x:T      if w128i{T}} = topMask{x} != 0
def topAll{x:T=[k]_ if w128i{T}} = topMask{x} == (1<<k)-1
def topAny{x:T if w128i{T, 16}} = homAny{[8]i16~~x  <  [8]i16**0}
def topAll{x:T if w128i{T, 16}} = homAll{[8]i16~~x  <  [8]i16**0}

# bits of other things SSE2 has
def packs{a:T,b:T==[8]i16} = emit{[16]i8,  '_mm_packs_epi16', a, b}
def packs{a:T,b:T==[4]i32} = emit{[ 8]i16, '_mm_packs_epi32', a, b}
def packs{a:T,b:T==[8]u16} = emit{[16]u8,  '_mm_packus_epi16', a, b}
def packQ{a:T,b:T if w128i{T}} = packs{a,b}

def x86_shufps_range{is, hi} = inrange{is,0,2, 0,4} and inrange{is,2,4, hi,hi+4}
def shufInd{a:T, b:T=[4]E, {...is} if width{E}==32 and length{is}==4 and x86_shufps_range{is, 4}} = vec_shuffle{[4]f32, tup{a, b}, is&3}

def homMaskStoreF{p:*T, m:M, v:T if w128i{M} and w128{T,elwidth{M}}} = store{p, 0, blend_hom{load{p}, v, m}}

def widen{T, x:X if w128i{T} and w128i{X} and w128s{T}==w128s{X} and elwidth{T}>elwidth{X}} = {
  def s{v} = s{mzip{v,v,0}}
  def s{v:(T)} = v
  s{x} >> (elwidth{T} - elwidth{X})
}
def widen{T==[2]f64, x:X if w128s{X} and elwidth{X}<32} = widen{T, widen{[4]i32, x}}
def widen{T==[2]f64, x:X==[4]i32} = emit{T, '_mm_cvtepi32_pd', x}
def widen{T==[2]f64, x:X==[4]f32} = emit{T, '_mm_cvtps_pd', x}

local def nsh = tup{0,2,3,3}
local def nar = vec_shuffle{..., nsh}
def narrow{T==i16, x:([4]i32)} = packs{x,x}
def narrow{T==i8,  x:([8]i16)} = packs{x,x}
def narrow{T==u8,  x:([8]u16)} = packs{x,x}
def narrow{T==u16, x:([4]u32)} = [8]u16~~nar{i32, nar{i16, x}}
def narrow{T==i8,  x:([4]i32)} = narrow{T, narrow{i16, x}}
def narrow{T==u8,  x:([4]u32)} = { def f{v} = narrow{u8, [8]u16~~v}; f{f{x}}}
def narrow{T==u8,  x:([2]u64)} = { def f{v} = narrow{u8, [8]u16~~v}; f{f{f{x}}}}
def narrow{T==u16, x:([2]u64)} = vec_shuffle16_lo{[8]u16~~nar{i32, x}, nsh}
def narrow{T==u32, x:([2]u64)} = [4]u32~~nar{i32, x}

def narrow{T, x:X if w128f{X,64} and T<i32} = narrow{T, narrow{i32, x}}
def narrow{T==i32, x:([2]f64)} = emit{[4]i32, '_mm_cvtpd_epi32', x}
